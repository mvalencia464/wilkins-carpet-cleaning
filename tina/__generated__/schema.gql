# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  hero(relativePath: String): Hero!
  heroConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeroFilter): HeroConnection!
  services(relativePath: String): Services!
  servicesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServicesFilter): ServicesConnection!
  testimonials(relativePath: String): Testimonials!
  testimonialsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TestimonialsFilter): TestimonialsConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
}

input DocumentFilter {
  hero: HeroFilter
  services: ServicesFilter
  testimonials: TestimonialsFilter
  about: AboutFilter
  blog: BlogFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Hero | Services | Testimonials | About | Blog | Folder

type HeroCta {
  text: String
  phone: String
}

type Hero implements Node & Document {
  title: String!
  subtitle: String!
  phone: String!
  serviceAreas: String!
  cta: HeroCta
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HeroCtaFilter {
  text: StringFilter
  phone: StringFilter
}

input HeroFilter {
  title: StringFilter
  subtitle: StringFilter
  phone: StringFilter
  serviceAreas: StringFilter
  cta: HeroCtaFilter
}

type HeroConnectionEdges {
  cursor: String!
  node: Hero
}

type HeroConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeroConnectionEdges]
}

type ServicesFeatures {
  feature: String
}

type Services implements Node & Document {
  title: String!
  description: String!
  icon: String!
  features: [ServicesFeatures]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServicesFeaturesFilter {
  feature: StringFilter
}

input ServicesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
  features: ServicesFeaturesFilter
}

type ServicesConnectionEdges {
  cursor: String!
  node: Services
}

type ServicesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServicesConnectionEdges]
}

type Testimonials implements Node & Document {
  name: String!
  location: String!
  body: JSON!
  rating: Float!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input TestimonialsFilter {
  name: StringFilter
  location: StringFilter
  body: RichTextFilter
  rating: NumberFilter
}

type TestimonialsConnectionEdges {
  cursor: String!
  node: Testimonials
}

type TestimonialsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TestimonialsConnectionEdges]
}

type AboutStats {
  number: String
  label: String
}

type About implements Node & Document {
  title: String!
  content: JSON!
  stats: [AboutStats]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutStatsFilter {
  number: StringFilter
  label: StringFilter
}

input AboutFilter {
  title: StringFilter
  content: RichTextFilter
  stats: AboutStatsFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type Blog implements Node & Document {
  title: String!
  date: String!
  excerpt: String!
  featuredImage: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogFilter {
  title: StringFilter
  date: DatetimeFilter
  excerpt: StringFilter
  featuredImage: ImageFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHero(relativePath: String!, params: HeroMutation!): Hero!
  createHero(relativePath: String!, params: HeroMutation!): Hero!
  updateServices(relativePath: String!, params: ServicesMutation!): Services!
  createServices(relativePath: String!, params: ServicesMutation!): Services!
  updateTestimonials(relativePath: String!, params: TestimonialsMutation!): Testimonials!
  createTestimonials(relativePath: String!, params: TestimonialsMutation!): Testimonials!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
}

input DocumentUpdateMutation {
  hero: HeroMutation
  services: ServicesMutation
  testimonials: TestimonialsMutation
  about: AboutMutation
  blog: BlogMutation
  relativePath: String
}

input DocumentMutation {
  hero: HeroMutation
  services: ServicesMutation
  testimonials: TestimonialsMutation
  about: AboutMutation
  blog: BlogMutation
}

input HeroCtaMutation {
  text: String
  phone: String
}

input HeroMutation {
  title: String
  subtitle: String
  phone: String
  serviceAreas: String
  cta: HeroCtaMutation
}

input ServicesFeaturesMutation {
  feature: String
}

input ServicesMutation {
  title: String
  description: String
  icon: String
  features: [ServicesFeaturesMutation]
}

input TestimonialsMutation {
  name: String
  location: String
  body: JSON
  rating: Float
}

input AboutStatsMutation {
  number: String
  label: String
}

input AboutMutation {
  title: String
  content: JSON
  stats: [AboutStatsMutation]
}

input BlogMutation {
  title: String
  date: String
  excerpt: String
  featuredImage: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
